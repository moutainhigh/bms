<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jiuyescm.bms.biz.storage.mapper.BizProductPalletStorageEntityMapper" >
    <resultMap id="BaseResultMap" type="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity" >

        <id column="id" property="id" jdbcType="INTEGER" />
	   <result column="id" property="id" jdbcType="BIGINT" />
	   <result column="data_num" property="dataNum" jdbcType="VARCHAR" />
	   <result column="stock_time" property="stockTime" jdbcType="TIMESTAMP" />
	   <result column="warehouse_code" property="warehouseCode" jdbcType="VARCHAR" />
	   <result column="warehouse_name" property="warehouseName" jdbcType="VARCHAR" />
	   <result column="customerid" property="customerId" jdbcType="VARCHAR" />
	   <result column="customer_name" property="customerName" jdbcType="VARCHAR" />
	   <result column="temperature_type_code" property="temperatureTypeCode" jdbcType="VARCHAR" />
	   <result column="temperature_type_name" property="temperatureTypeName" jdbcType="VARCHAR" />
	   <result column="pallet_num" property="palletNum" jdbcType="DOUBLE" />
	   <result column="fees_no" property="feesNo" jdbcType="VARCHAR" />
	   <result column="is_calculated" property="isCalculated" jdbcType="VARCHAR" />
	   <result column="remark" property="remark" jdbcType="VARCHAR" />
	   <result column="creator" property="creator" jdbcType="VARCHAR" />
	   <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	   <result column="last_modifier" property="lastModifier" jdbcType="VARCHAR" />
	   <result column="last_modify_time" property="lastModifyTime" jdbcType="TIMESTAMP" />
	   <result column="del_flag" property="delFlag" jdbcType="VARCHAR" />
       <result column="write_time" property="writeTime" jdbcType="TIMESTAMP" />
	   <result column="calculate_time" property="calculateTime" jdbcType="TIMESTAMP" />
	   <result column="adjust_pallet_num" property="adjustPalletNum" jdbcType="DOUBLE" />
	   <result column="extattr1" property="extattr1" jdbcType="VARCHAR" />
       <result column="extattr2" property="extattr2" jdbcType="VARCHAR" />
       <result column="extattr3" property="extattr3" jdbcType="VARCHAR" />
       <result column="extattr4" property="extattr4" jdbcType="VARCHAR" />
       <result column="extattr5" property="extattr5" jdbcType="VARCHAR" />
    </resultMap>
  
    <sql id="baseColumns">
        id, data_num, stock_time, warehouse_code,warehouse_name, customerid,customer_name,temperature_type_code,temperature_type_name, pallet_num, fees_no, is_calculated, remark, creator, create_time, last_modifier, last_modify_time,write_time,calculate_time, del_flag, extattr1, extattr2, extattr3, extattr4, extattr5,adjust_pallet_num
    </sql>
	
	<sql id="baseSelectColumns">
		<if test="(id != null and id !='')" >
				and a.id = #{id}
		</if>
		<if test="(dataNum != null and dataNum !='')" >
				and a.data_num = #{dataNum}
		</if>
		<if test="(warehouseCode != null and warehouseCode !='')" >
				and a.warehouse_code =#{warehouseCode}
		</if>
		<if test="(warehouseName != null and warehouseName !='')" >
				and a.warehouse_name =#{warehouseName}
		</if>
		<if test="(customerId != null and customerId !='')" >
				and a.customerid =#{customerId}
		</if>
		<if test="(customerName != null and customerName !='')" >
				and a.customer_name =#{customerName}
		</if>
		<if test="(temperatureTypeCode != null and temperatureTypeCode !='')" >
				and a.temperature_type_code =#{temperatureTypeCode}
		</if>
		<if test="(temperatureTypeName != null and temperatureTypeName !='')" >
				and a.temperature_type_name =#{temperatureTypeName}
		</if>
		<if test="(palletNum != null and palletNum !='')" >
				and a.pallet_num =#{palletNum}
		</if>
		<if test="(feesNo != null and feesNo !='')" >
				and a.fees_no =#{feesNo}
		</if>
		<if test="(isCalculated != null and isCalculated !='')" >
				and a.is_calculated =#{isCalculated}
		</if>
		<if test="(startTime != null and startTime !='') " >
			    and <![CDATA[a.stock_time >= #{startTime}]]> 
		</if>
		
		<if test="(endTime != null and endTime !='')" >
			    and <![CDATA[a.stock_time <= #{endTime}]]>
		</if>
		<if test="(extattr1 != null and extattr1 !='')" >
				and a.extattr1 = #{extattr1}
		</if>
    </sql>
	
    <select id="query" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        select
        <include refid="baseColumns" />
        from biz_product_pallet_storage a
        where del_flag = 0 
        <include refid="baseSelectColumns" />
        order by create_time desc
    </select>
    <select id="queryAllBystockTime" parameterType="java.util.Map"
        resultMap="BaseResultMap">
        select
        <include refid="baseColumns" />
        from biz_product_pallet_storage a
        where del_flag = 0 
        and <![CDATA[stock_time>=#{startTime}]]>
        and <![CDATA[stock_time<=#{endTime}]]>
    </select>
    <select id="queryGroup" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
       select warehouse_code,customerid,temperature_type_code,COUNT(*) as num from 
       ( select warehouse_code,customerid,temperature_type_code from biz_product_pallet_storage a where del_flag = 0  <include refid="baseSelectColumns" /> order by create_time desc ) q 
       group by warehouse_code,customerid,temperature_type_code
    </select>

    <select id="findById" resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        select
        <include refid="baseColumns" />
        from biz_product_pallet_storage
        where id=#{id}
    </select>

    <insert id="save" parameterType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        insert into biz_product_pallet_storage(data_num, stock_time, warehouse_code,warehouse_name, customerid,customer_name, temperature_type_code,temperature_type_name, pallet_num,adjust_pallet_num, fees_no, is_calculated, remark, creator, create_time, last_modifier, last_modify_time, write_time, calculate_time,del_flag)
        values (

			#{dataNum,jdbcType=VARCHAR}, 
			#{stockTime,jdbcType=TIMESTAMP}, 
			#{warehouseCode,jdbcType=VARCHAR}, 
			#{warehouseName,jdbcType=VARCHAR}, 
			
			#{customerId,jdbcType=VARCHAR}, 
			#{customerName,jdbcType=VARCHAR}, 
			
			#{temperatureTypeCode,jdbcType=VARCHAR}, 
			#{temperatureTypeName,jdbcType=VARCHAR}, 
			
			#{palletNum,jdbcType=DOUBLE}, 
			#{adjustPalletNum,jdbcType=DOUBLE},
			#{feesNo,jdbcType=VARCHAR}, 
			#{isCalculated,jdbcType=VARCHAR}, 
			
			#{remark,jdbcType=VARCHAR}, 
			#{creator,jdbcType=VARCHAR}, 
			#{createTime,jdbcType=TIMESTAMP}, 
			#{lastModifier,jdbcType=VARCHAR}, 
			#{lastModifyTime,jdbcType=TIMESTAMP},
			#{writeTime,jdbcType=TIMESTAMP}, 
			#{calculateTime,jdbcType=TIMESTAMP}, 
			#{delFlag,jdbcType=VARCHAR}
        )
    </insert>

    <update id="update" parameterType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        update biz_product_pallet_storage set
			data_num=#{dataNum,jdbcType=VARCHAR}, 
			stock_time=#{stockTime,jdbcType=TIMESTAMP}, 
			warehouse_code=#{warehouseCode,jdbcType=VARCHAR}, 
			warehouse_name=#{warehouseName,jdbcType=VARCHAR}, 
			customerid=#{customerId,jdbcType=VARCHAR}, 
			customer_name=#{customerName,jdbcType=VARCHAR}, 
			temperature_type_code=#{temperatureTypeCode,jdbcType=VARCHAR}, 
			temperature_type_name=#{temperatureTypeName,jdbcType=VARCHAR}, 
			pallet_num=#{palletNum,jdbcType=DOUBLE}, 
			fees_no=#{feesNo,jdbcType=VARCHAR}, 
			is_calculated=#{isCalculated,jdbcType=VARCHAR}, 
			creator=#{creator,jdbcType=VARCHAR}, 
			create_time=#{createTime,jdbcType=TIMESTAMP}, 
			last_modifier=#{lastModifier,jdbcType=VARCHAR}, 
			last_modify_time=#{lastModifyTime,jdbcType=TIMESTAMP}, 
			del_flag=#{delFlag,jdbcType=VARCHAR},
			write_time=#{writeTime,jdbcType=TIMESTAMP},
			calculate_time=#{calculateTime,jdbcType=TIMESTAMP}
			 where id=#{id}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        delete from biz_product_pallet_storage where
        id=#{id}
    </delete>
    
    
    <select id="validBillForRetry" parameterType="java.util.Map" resultType = "String">
        select a.data_num from biz_product_pallet_storage a
		inner join fees_receive_storage b on a.fees_no = b.fees_no
		inner join fees_bill c on b.bill_no = c.billno and c.delflag = 0
		where a.del_flag = 0 
		<include refid="baseSelectColumns" />
		LIMIT 1
    </select>
    
    <select id="validCalcuForRetry" parameterType="java.util.Map" resultType = "String">
       	select a.data_num from biz_product_pallet_storage a 
		where a.del_flag = 0 and is_calculated = 1 
		<include refid="baseSelectColumns" />
		LIMIT 1
    </select>
    
     <update id="retryForCalcu" parameterType="java.util.Map">
        update biz_product_pallet_storage a set a.is_calculated = 99 where a.del_flag = 0
        <include refid="baseSelectColumns" />
    </update>
    
    <select id="queryDelete" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
       SELECT  a.* from biz_product_pallet_storage a LEFT JOIN  fees_receive_storage  f on a.fees_no = f.fees_no where f.`status` = '0'
       <include refid="baseSelectColumns" /> 
       union 
       SELECT  a.* from biz_product_pallet_storage a where a.fees_no is null 
       <include refid="baseSelectColumns" />
    </select>
    
    <delete id="deleteFees" parameterType="java.util.Map">
       delete  f.* from biz_product_pallet_storage a LEFT JOIN  fees_receive_storage  f on a.fees_no = f.fees_no where f.`status` = '0'
        <include refid="baseSelectColumns" /> 
    </delete>
    
    <select id="queryByMonth" parameterType="java.util.Map" resultType = "java.util.Map">
      SELECT  b.customerid,COUNT(*) as num from (SELECT customerid  from  biz_product_pallet_storage a  where del_flag = 0   <include refid="baseSelectColumns" /> )   b  GROUP BY b.customerid
    </select>
         
     <select id="queryCustomeridF" parameterType="java.util.Map" resultType = "java.util.Map">
      SELECT  DISTINCT b.customerid  from biz_outstock_master b  where b.del_flag = 0 and  b.create_time <![CDATA[>= ]]>#{bstartTime}  and  b.create_time <![CDATA[<= ]]>#{bendTime}  <if test="(warehouseCode != null and warehouseCode !='')" >
				and b.warehouse_code = #{warehouseCode}
		</if>  and  b.customerid not in ( SELECT  DISTINCT customerid from biz_product_pallet_storage a where del_flag = 0 <include refid="baseSelectColumns" /> )
     </select>
    
    <select id="queryOneByParam" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
       select
        <include refid="baseColumns" />
        from biz_product_pallet_storage a
        where del_flag = 0 
        and a.warehouse_code =#{warehouseCode}
        and a.customerid =#{customerId}
        and a.temperature_type_code =#{temperatureTypeCode}
        and <![CDATA[a.stock_time = #{stockTime}]]> 
    </select>
        
    
    <update id="updateBatch" parameterType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        update biz_product_pallet_storage set
			adjust_pallet_num=#{palletNum,jdbcType=DOUBLE}
			 where id=#{id}
    </update>
    
    <select id="queryStorageDiff" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizProductPalletStorageEntity">
        SELECT customerid as customerId, warehouse_code as warehouseCode, 
        	   stock_time as stockTime, temperature_type_code as temperatureTypeCode, 
        	   IFNULL(pallet_num, 0) as palletNum, IFNULL(aqty, 0) as aqty,
        	   case when ((pallet_num != 0.000000 AND aqty != 0.000000) or (pallet_num = 0.000000 AND aqty = 0.000000)) then 'N'
			   else 'Y' end as isDifferent
        FROM (
	        SELECT pp.customerid, pp.warehouse_code, pp.stock_time, 
	        	   pp.temperature_type_code, IFNULL(pp.pallet_num, 0) as pallet_num, IFNULL(ps.aqty, 0) as aqty
			FROM (SELECT customerid, warehouse_code, 
						 DATE_FORMAT(create_time, "%Y-%m-%d") as stock_time, temperature_type_code, 
					     SUM(IFNULL(pallet_num, 0)) as pallet_num
				  FROM biz_product_pallet_storage
				  WHERE del_flag = '0'
				  AND create_time <![CDATA[>=]]> #{startTime} AND create_time <![CDATA[<]]> #{endTime}
				  GROUP BY customerid, warehouse_code, 
					 DATE_FORMAT(create_time, "%Y-%m-%d"),temperature_type_code
				  ) pp
			LEFT JOIN 
				(SELECT customerid, warehouse_code, 
					    DATE_FORMAT(create_time, "%Y-%m-%d") as cur_day, temperature, SUM(IFNULL(aqty, 0)) as aqty
				 FROM biz_product_storage
				 WHERE del_flag = '0'
				 AND create_time <![CDATA[>=]]> #{startTime} AND create_time <![CDATA[<]]> #{endTime}
				 GROUP BY customerid, warehouse_code, DATE_FORMAT(create_time, "%Y-%m-%d"),temperature
				) ps
			ON pp.stock_time = ps.cur_day
			AND pp.customerid = ps.customerid
			AND pp.warehouse_code = ps.warehouse_code
			AND pp.temperature_type_code = ps.temperature
			WHERE 1 = 1
			<if test="(customerId != null and customerId !='')" >
				AND pp.customerid = #{customerId}
			</if>
			<if test="(warehouseCode != null and warehouseCode !='')" >
				AND pp.warehouse_code = #{warehouseCode}
			</if>
			<if test="(temperatureTypeCode != null and temperatureTypeCode !='')" >
				AND pp.temperature_type_code = #{temperatureTypeCode}
			</if>
			
			UNION
	
			SELECT ps.customerid, ps.warehouse_code, ps.cur_day as stock_time, 
				   ps.temperature as temperature_type_code, IFNULL(pp.pallet_num, 0) as pallet_num, IFNULL(ps.aqty, 0) as aqty
			FROM (SELECT customerid, warehouse_code, 
						 DATE_FORMAT(create_time, "%Y-%m-%d") as stock_time, temperature_type_code, 
					 	 SUM(IFNULL(pallet_num, 0)) as pallet_num
				  FROM biz_product_pallet_storage
				  WHERE del_flag = '0'
				  AND create_time <![CDATA[>=]]> #{startTime} AND create_time <![CDATA[<]]> #{endTime}
				  GROUP BY customerid, warehouse_code, DATE_FORMAT(create_time, "%Y-%m-%d"),temperature_type_code
				  ) pp
			RIGHT JOIN 
				 (SELECT customerid, warehouse_code,
					 	 DATE_FORMAT(create_time, "%Y-%m-%d") as cur_day, temperature, SUM(IFNULL(aqty, 0)) as aqty
				  FROM biz_product_storage
				  WHERE del_flag = '0'
				  AND create_time <![CDATA[>=]]> #{startTime} AND create_time <![CDATA[<]]> #{endTime}
				  GROUP BY customerid, warehouse_code, DATE_FORMAT(create_time, "%Y-%m-%d"),temperature
				 ) ps
			ON pp.stock_time = ps.cur_day
			AND pp.customerid = ps.customerid
			AND pp.warehouse_code = ps.warehouse_code
			AND pp.temperature_type_code = ps.temperature
			WHERE 1 = 1
			<if test="(customerId != null and customerId !='')" >
				AND ps.customerid = #{customerId}
			</if>
			<if test="(warehouseCode != null and warehouseCode !='')" >
				AND ps.warehouse_code = #{warehouseCode}
			</if>
			<if test="(temperatureTypeCode != null and temperatureTypeCode !='')" >
				AND ps.temperature = #{temperatureTypeCode}
			</if>
		) a
		where 1=1
		<if test="(isDifferent != null and isDifferent == &quot;N&quot;)" >
			AND ((pallet_num != 0.000000 AND aqty != 0.000000) or (pallet_num = 0.000000 AND aqty = 0.000000))
		</if>
		<if test="(isDifferent != null and isDifferent == &quot;Y&quot;)" >
			AND ((pallet_num = 0.000000 AND aqty != 0.000000) or (pallet_num != 0.000000 AND aqty = 0.000000))
		</if>
    </select>
     
    <insert id="saveDataFromTemp" parameterType="java.util.Map">
    	insert into biz_product_pallet_storage(stock_time, warehouse_code, warehouse_name, customerid, customer_name, temperature_type_code, temperature_type_name, pallet_num, is_calculated, creator, create_time, del_flag, write_time, adjust_pallet_num)
		select  stock_time, warehouse_code, warehouse_name, customerid, customer_name, temperature_type_code, temperature_type_name, pallet_num, is_calculated, creator, create_time, del_flag, write_time, adjust_pallet_num
		from biz_product_pallet_storage_temp where task_id=#{taskId}                             
    </insert>
</mapper>