<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jiuyescm.bms.correct.mapper.BmsProductsMaterialMapper" >
	<resultMap id="baseResultMap" type="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity" >
        <id column="id" property="id" jdbcType="BIGINT" />
	    <result column="id" property="id" jdbcType="BIGINT" />
	    <result column="products_mark" property="productsMark" jdbcType="VARCHAR" />
	    <result column="material_type" property="materialType" jdbcType="VARCHAR" />
	    <result column="material_mark" property="materialMark" jdbcType="VARCHAR" />
	    <result column="percent" property="percent" jdbcType="DOUBLE" />
	    <result column="task_id" property="taskId" jdbcType="VARCHAR" />
    </resultMap>
    
  
    <sql id="baseColumns">
		id, products_mark, material_type, material_mark, percent, task_id
    </sql>
	
	<sql id="baseSelectColumns">
		<if test="(id != null and id !='')" >
				and id = #{id}
		</if>
		<if test="(productsMark != null and productsMark !='')" >
				and products_mark = #{productsMark}
		</if>
		<if test="(materialType != null and materialType !='')" >
				and material_type = #{materialType}
		</if>
		<if test="(materialMark != null and materialMark !='')" >
				and material_mark = #{materialMark}
		</if>
		<if test="(percent != null and percent !='')" >
				and percent = #{percent}
		</if>
		<if test="(taskId != null and taskId !='')" >
				and task_id = #{taskId}
		</if>
    </sql>
	  
    <select id="query" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
        select
        <include refid="baseColumns" />
        from bms_products_material_account
        where 1=1
		<include refid="baseSelectColumns" />
    </select>
    
     <select id="queyAllMax" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
		select a.products_mark, a.material_type, a.percent,GROUP_CONCAT(a.material_mark) as material_mark,a.task_id from bms_products_material_account a
		inner JOIN (
			SELECT MAX(percent) percent,products_mark,material_type,task_id FROM bms_products_material_account WHERE percent!=1 and task_id =#{taskId} and type='PMXZX'
			GROUP BY products_mark, material_type
		) b
		on a.products_mark=b.products_mark and a.material_type=b.material_type and a.task_id=b.task_id and a.percent=b.percent
		where a.task_id =#{taskId} and a.type='PMXZX'
		GROUP BY a.products_mark,a.material_type,a.percent
     </select>
     
    <select id="queyAllPmxMax" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
		select a.products_mark, a.material_type, a.percent,GROUP_CONCAT(a.material_mark) as material_mark,a.task_id from bms_products_material_account a
		inner JOIN (
			SELECT MAX(percent) percent,products_mark,material_type,task_id FROM bms_products_material_account WHERE percent!=1 and task_id =#{taskId} and type='PMX'
			GROUP BY products_mark, material_type
		) b
		on a.products_mark=b.products_mark and a.material_type=b.material_type and a.task_id=b.task_id and a.percent=b.percent
		where a.task_id =#{taskId} and a.type='PMX'
		GROUP BY a.products_mark,a.material_type,a.percent
     </select>
     
     <select id="queyAllZxMax" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
		select a.products_mark, a.material_type, a.percent,GROUP_CONCAT(a.material_mark) as material_mark,a.task_id from bms_products_material_account a
		inner JOIN (
			SELECT MAX(percent) percent,products_mark,material_type,task_id FROM bms_products_material_account WHERE percent!=1 and task_id =#{taskId} and type='ZX'
			GROUP BY products_mark, material_type
		) b
		on a.products_mark=b.products_mark and a.material_type=b.material_type and a.task_id=b.task_id and a.percent=b.percent
		where a.task_id =#{taskId} and a.type='ZX'
		GROUP BY a.products_mark,a.material_type,a.percent
     </select>
     
     <select id="queyAllBwxMax" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
        select a.products_mark, a.percent,GROUP_CONCAT(a.material_mark) as material_mark,a.task_id from bms_products_material_account a
		inner JOIN (
			SELECT MAX(percent) percent,products_mark, task_id FROM bms_products_material_account WHERE percent!=1 and task_id =#{taskId} and type='BWD'
			GROUP BY products_mark
		) b
		on a.products_mark=b.products_mark and a.task_id=b.task_id and a.percent=b.percent
		where a.task_id=#{taskId} and a.type='BWD'
		GROUP BY a.products_mark,a.percent
     </select>
     
     <select id="queyNotMax" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsMarkingMaterialEntity">       
        select DISTINCT(a.waybill_no) from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		where 1=1 and a.products_mark=#{productsMark} and a.material_type=#{materialType} and a.pmxzx_mark!=#{pmxzxMark}
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.create_time>=#{startTime} and b.create_time<![CDATA[<#{endTime}]]>
     </select>
     
     <select id="queyNotMaxMaterial" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizOutstockPackmaterialEntity">
       	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.material_type=#{materialType} and a.pmxzx_mark!=#{pmxzxMark}
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
		<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>		
    	GROUP BY b.waybill_no
    	union
    	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.material_type=#{materialType} and a.pmxzx_mark=#{pmxzxMark} and a.pmxzx_corrected='1'
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
    	<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>	
    	GROUP BY b.waybill_no
     </select>
     
     
      <select id="queyNotMaxPmx" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizOutstockPackmaterialEntity">
       	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.pmx_type=#{pmxType} and a.pmx_mark!=#{pmxMark}
		and b.del_flag='0' and c.material_type_name in ('泡沫箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
		<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>
        and d.is_new_plan='0'	
    	GROUP BY b.waybill_no
    	union
    	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.pmx_type=#{pmxType} and a.pmx_mark=#{pmxMark} and a.pmx_corrected='1'
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
    	<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>
       and  d.is_new_plan='0'	
    	GROUP BY b.waybill_no
     </select>
     
     <select id="queyNotMaxZx" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizOutstockPackmaterialEntity">
       	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.zx_type=#{zxType} and a.zx_mark!=#{zxMark}
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
		<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>
        and d.is_new_plan='0'			
    	GROUP BY b.waybill_no
    	union
    	select b.* from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and a.products_mark=#{productsMark} and a.zx_type=#{zxType} and a.zx_mark=#{zxMark} and a.zx_corrected='1'
		and b.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱') and b.customer_id=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
    	<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
        </if>
        and d.is_new_plan='0'		
    	GROUP BY b.waybill_no
     </select>
	
	 <select id="queryMark" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsMarkingMaterialEntity">
        select a.* from bms_marking_material a
        inner JOIN bms_marking_products b on a.waybill_no=b.waybill_no
        where 1=1
        <if test="(materialType != null and materialType !='')" >
				and a.material_type = #{materialType}
		</if>
		<if test="(materialMark != null and materialMark !='')" >
				and a.material_mark = #{materialMark}
		</if>
		<if test="(productsMark != null and productsMark !='')" >
				and b.products_mark = #{productsMark}
		</if>
     </select>
     
     <select id="queryOneMark" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.correct.BmsMarkingMaterialEntity">
     	 select a.* from bms_marking_material a
     	 inner JOIN bms_marking_products b on a.waybill_no=b.waybill_no 
     	 where 1=1
        <if test="(materialType != null and materialType !='')" >
				and a.material_type = #{materialType}
		</if>
		<if test="(materialMark != null and materialMark !='')" >
				and a.material_mark = #{materialMark}
		</if>
		<if test="(productsMark != null and productsMark !='')" >
				and b.products_mark = #{productsMark}
		</if>
		limit 1
     </select>
     
     <insert id="markMaterial" parameterType="java.util.Map">
     	INSERT INTO bms_marking_products(waybill_no,pmxzx_mark,material_type)
		select m.waybill_no, m.md, m.tp from
		(SELECT waybill_no, md, tp
		FROM(
				SELECT waybill_no, tp,
						MD5(GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)) as md,
		GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)
				FROM (
						SELECT  waybill_no, consumer_material_code, num, customer_id,date_format(create_time,'%Y%m') as create_time,
								SUBSTR(consumer_material_code, 1, LOCATE('-', consumer_material_code) - 1) as tp
						FROM biz_outstock_packmaterial_temp where batchNum=#{batchNum}
								AND (consumer_material_code LIKE '%PMX%' or consumer_material_code LIKE '%ZX%')
				) a
				GROUP BY waybill_no, tp
		) b
		GROUP BY waybill_no
		HAVING COUNT(tp) = 1) m
		ON DUPLICATE KEY UPDATE
		pmxzx_mark =m.md,material_type=m.tp 
     </insert>
     
     <insert id="markPmx" parameterType="java.util.Map">
     	INSERT INTO bms_marking_products(waybill_no,pmx_mark,pmx_type)
		select m.waybill_no, m.md, m.tp from
		(SELECT waybill_no, md, tp
		FROM(
				SELECT waybill_no, tp,
						MD5(GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)) as md,
		GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)
				FROM (
						SELECT  waybill_no, consumer_material_code, num, customer_id,date_format(create_time,'%Y%m') as create_time,
								SUBSTR(consumer_material_code, 1, LOCATE('-', consumer_material_code) - 1) as tp
						FROM biz_outstock_packmaterial_temp where batchNum=#{batchNum}
								AND consumer_material_code LIKE '%PMX%'
				) a
				GROUP BY waybill_no, tp
		) b
		GROUP BY waybill_no
		HAVING COUNT(tp) = 1) m
		ON DUPLICATE KEY UPDATE
		pmx_mark =m.md,pmx_type=m.tp 
     </insert>
     
     <insert id="markZx" parameterType="java.util.Map">
     	INSERT INTO bms_marking_products(waybill_no,zx_mark,zx_type)
		select m.waybill_no, m.md, m.tp from
		(SELECT waybill_no, md, tp
		FROM(
				SELECT waybill_no, tp,
						MD5(GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)) as md,
		GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)
				FROM (
						SELECT  waybill_no, consumer_material_code, num, customer_id,date_format(create_time,'%Y%m') as create_time,
								SUBSTR(consumer_material_code, 1, LOCATE('-', consumer_material_code) - 1) as tp
						FROM biz_outstock_packmaterial_temp where batchNum=#{batchNum}
								AND consumer_material_code LIKE '%ZX%'
				) a
				GROUP BY waybill_no, tp
		) b
		GROUP BY waybill_no
		HAVING COUNT(tp) = 1) m
		ON DUPLICATE KEY UPDATE
		zx_mark =m.md,zx_type=m.tp 
     </insert>
     
     
     <insert id="markBwd" parameterType="java.util.Map">
     	INSERT INTO bms_marking_products(waybill_no,bwd_mark)
		select m.waybill_no,m.bwd from
		( SELECT waybill_no, bwd
				FROM(
						SELECT waybill_no,
								MD5(GROUP_CONCAT(CONCAT_WS('*',consumer_material_code, IFNULL(num, 0),customer_id,create_time) ORDER BY consumer_material_code)) as bwd
						FROM (
								SELECT  waybill_no, consumer_material_code, num, customer_id,date_format(create_time,'%Y%m') as create_time
								FROM biz_outstock_packmaterial_temp where batchNum=#{batchNum}
										AND (consumer_material_code LIKE '%BWD%')
						) a
						GROUP BY waybill_no
				) b
				GROUP BY waybill_no) m
		ON DUPLICATE KEY UPDATE
			bwd_mark=m.bwd
     </insert>
     
     <insert id="saveMarkMaterial" parameterType="java.util.Map">
     	INSERT into bms_material_mark_origin (material_mark,consumer_material_code,consumer_material_name,spec_desc,num)
		select b.pmxzx_mark,a.consumer_material_code,a.consumer_material_name,a.spec_desc,a.num from biz_outstock_packmaterial_temp a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		where a.batchNum=#{batchNum} and c.del_flag='0' and c.material_type_name in ('泡沫箱','纸箱')
		and b.pmxzx_mark is not null and b.pmxzx_mark !=''
		GROUP BY b.pmxzx_mark,a.consumer_material_code 	
     </insert>
     
     <insert id="saveMarkPmx" parameterType="java.util.Map">
     	INSERT into bms_material_mark_origin (material_mark,consumer_material_code,consumer_material_name,spec_desc,num)
		select b.pmx_mark,a.consumer_material_code,a.consumer_material_name,a.spec_desc,a.num from biz_outstock_packmaterial_temp a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		where a.batchNum=#{batchNum} and c.del_flag='0' and c.material_type_name in ('泡沫箱') GROUP BY b.pmx_mark,a.consumer_material_code   	
     </insert>
     
     <insert id="saveMarkZx" parameterType="java.util.Map">
     	INSERT into bms_material_mark_origin (material_mark,consumer_material_code,consumer_material_name,spec_desc,num)
		select b.zx_mark,a.consumer_material_code,a.consumer_material_name,a.spec_desc,a.num from biz_outstock_packmaterial_temp a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		where a.batchNum=#{batchNum} and c.del_flag='0' and c.material_type_name in ('纸箱') GROUP BY b.zx_mark,a.consumer_material_code   	
     </insert>
   
     <insert id="saveMarkBwd" parameterType="java.util.Map">
     	INSERT into bms_material_mark_origin (material_mark,consumer_material_code,consumer_material_name,spec_desc,num)
		select b.bwd_mark,a.consumer_material_code,a.consumer_material_name,a.spec_desc,a.num from biz_outstock_packmaterial_temp a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		where a.batchNum=#{batchNum} and c.del_flag='0' and c.material_type_name in ('保温袋')
		and b.bwd_mark is not null and b.bwd_mark !=''
		GROUP BY b.bwd_mark
     </insert>
     
     <select id="queyMaterialCount" parameterType="java.util.Map" resultType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
         select m.products_mark,m.material_type,m.material_mark,ROUND(m.num1/n.num2*100)/100 as percent from
		(select b.products_mark,a.material_type,a.material_mark,COUNT(a.material_mark) as num1 from bms_marking_material a 
		LEFT JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN biz_dispatch_bill c on a.waybill_no=c.waybill_no
		where 1=1 and c.customerid=#{customerId} and c.create_time>=#{startTime} and c.create_time<![CDATA[<#{endTime}]]>
		GROUP BY b.products_mark,a.material_type,a.material_mark) m
		LEFT JOIN (select b.products_mark,a.material_type,a.material_mark,COUNT(a.material_mark) as num2 from bms_marking_material a 
		LEFT JOIN bms_marking_products b on a.waybill_no=b.waybill_no 
		INNER JOIN biz_dispatch_bill c on a.waybill_no=c.waybill_no 
		where 1=1 and c.customerid=#{customerId} and c.create_time>=#{startTime} and c.create_time<![CDATA[<#{endTime}]]>
		GROUP BY b.products_mark,a.material_type) n
		on m.products_mark=n.products_mark and m.material_type=n.material_type
     </select>
     
     <insert id="saveList" parameterType="com.jiuyescm.bms.correct.BmsProductsMaterialAccountEntity">
     	insert into bms_products_material_account(products_mark, material_type, material_mark, percent, task_id)
		        values (
		#{productsMark,jdbcType=VARCHAR}, 
		#{materialType,jdbcType=VARCHAR}, 
		#{materialMark,jdbcType=VARCHAR}, 
		#{percent,jdbcType=DOUBLE}, 
		#{taskId,jdbcType=VARCHAR}
		        )
     </insert>
     
     <insert id="saveMaterial" parameterType="java.util.Map">
     	insert into bms_products_material_account(products_mark, material_type, material_mark, percent, task_id, type)
     														    
     	 select m.products_mark,m.material_type,m.pmxzx_mark,ROUND(m.num1/n.num2,8) as percent,#{taskId},#{type} 
     	 from
			(select a.products_mark,a.material_type,a.pmxzx_mark,COUNT(a.pmxzx_mark) as num1 from bms_marking_products a
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no
			where 1=1 and a.pmxzx_mark!='' and a.pmxzx_mark is not null and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>				
			GROUP BY a.products_mark,a.material_type,a.pmxzx_mark) m
		 LEFT JOIN 
		 	(select a.products_mark,a.material_type,a.pmxzx_mark,COUNT(a.pmxzx_mark) as num2 from bms_marking_products a 
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no 
			where 1=1 and a.pmxzx_mark!='' and a.pmxzx_mark is not null and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>	
			GROUP BY a.products_mark,a.material_type) n
		 on m.products_mark=n.products_mark and m.material_type=n.material_type
     </insert>
     
      <insert id="savePmx" parameterType="java.util.Map">
     	insert into bms_products_material_account(products_mark, material_type, material_mark, percent, task_id, type)
     														    
     	 select m.products_mark,m.pmx_type,m.pmx_mark,ROUND(m.num1/n.num2,8) as percent,#{taskId},#{type} 
     	 from
			(select a.products_mark,a.pmx_type,a.pmx_mark,COUNT(a.pmx_mark) as num1 from bms_marking_products a
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no
			where 1=1 and a.pmx_mark!='' and a.pmx_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>				
			GROUP BY a.products_mark,a.pmx_type,a.pmx_mark) m
		 LEFT JOIN 
		 	(select a.products_mark,a.pmx_type,a.pmx_mark,COUNT(a.pmx_mark) as num2 from bms_marking_products a 
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no 
			where 1=1 and a.pmx_mark!='' and a.pmx_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>	
			GROUP BY a.products_mark,a.pmx_type) n
		 on m.products_mark=n.products_mark and m.pmx_type=n.pmx_type
     </insert>
     
     
      <insert id="saveZx" parameterType="java.util.Map">
     	insert into bms_products_material_account(products_mark, material_type, material_mark, percent, task_id, type)
     														    
     	 select m.products_mark,m.zx_type,m.zx_mark,ROUND(m.num1/n.num2,8) as percent,#{taskId},#{type} 
     	 from
			(select a.products_mark,a.zx_type,a.zx_mark,COUNT(a.zx_mark) as num1 from bms_marking_products a
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no
			where 1=1 and a.zx_mark!='' and a.zx_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>				
			GROUP BY a.products_mark,a.zx_type,a.zx_mark) m
		 LEFT JOIN 
		 	(select a.products_mark,a.zx_type,a.zx_mark,COUNT(a.zx_mark) as num2 from bms_marking_products a 
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no 
			where 1=1 and a.zx_mark!='' and a.zx_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>	
			GROUP BY a.products_mark,a.zx_type) n
		 on m.products_mark=n.products_mark and m.zx_type=n.zx_type
     </insert>
     
     
     <insert id="saveBwd" parameterType="java.util.Map">
		insert into bms_products_material_account(products_mark, material_mark, percent, task_id, type)
		select m.products_mark,m.bwd_mark,ROUND(m.num1/n.num2,8) as percent, #{taskId},#{type} 
     	 from
			(select a.products_mark,a.bwd_mark,COUNT(a.bwd_mark) as num1 from bms_marking_products a
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no
			where 1=1 and a.bwd_mark!='' and a.bwd_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>	
			GROUP BY a.products_mark,a.bwd_mark) m
		 LEFT JOIN 
		 	(select a.products_mark,a.bwd_mark,COUNT(a.bwd_mark) as num2 from bms_marking_products a 
			INNER JOIN biz_dispatch_bill b on a.waybill_no=b.waybill_no 
			where 1=1 and a.bwd_mark!='' and a.bwd_mark is not null and b.is_new_plan='0' and b.del_flag='0' and b.customerid=#{customerId} and b.create_time>=#{startTime} and b.create_time<![CDATA[<=#{endTime}]]>
			<if test="(orderList!=null and orderList.size()>0)">
	        	and IFNULL(b.ordertypeid,'') not in
	        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
	        	 	#{item}
	        	</foreach>
	        </if>	
			GROUP BY a.products_mark) n
		 on m.products_mark=n.products_mark
     </insert>
     
     <update id="deleteMarkMaterialByWaybillNo" parameterType="java.util.Map">
     	update bms_marking_products set pmx_mark=null,pmx_type=null,pmx_corrected='0',zx_mark=null,zx_type=null,zx_corrected='0',bwd_mark=null,bwd_corrected='0'  where waybill_no in
     	<foreach collection="waybillNoList" index="index" item="item" open="(" separator="," close=")">
     		#{item}
     	</foreach>
     </update>
     
     <update id="updateMaterialAccount" parameterType="java.util.Map">
     	 update bms_products_material_account set waybill_no=#{waybillNo,jdbcType=VARCHAR}
		 where 1=1
		 <if test="(productsMark != null and productsMark !='')" >
		  	 and products_mark=#{productsMark,jdbcType=VARCHAR}
		 </if>
		 <if test="(materialType != null and materialType !='')" >
		 	 and material_type=#{materialType,jdbcType=VARCHAR}		 	 
		 </if>
		  <if test="(materialMark != null and materialMark !='')" >
 			 and material_mark=#{materialMark,jdbcType=VARCHAR}
 		 </if>
 		  <if test="(percent != null and percent !='')" >
 			 and percent=#{percent,jdbcType=VARCHAR}
 		 </if>
 		 <if test="(taskId != null and taskId !='')" >
 			 and task_id=#{taskId,jdbcType=VARCHAR}
 		 </if>
 		  <if test="(type != null and type !='')" >
 			 and type=#{type,jdbcType=VARCHAR}
 		 </if>
     </update>
     
     <select id="queryBwdMaterial" parameterType="java.util.Map" resultType="com.jiuyescm.bms.biz.storage.entity.BizOutstockPackmaterialEntity">  	
   		select a.* from biz_outstock_packmaterial a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		where b.products_mark=#{productsMark} and b.bwd_mark=#{bwdMark} and a.extattr5='origin' and a.del_flag='0' and c.material_type_name='保温袋' and c.del_flag='0' limit 1
     </select>
     
     <select id="queyNotMaxBwd" parameterType="java.util.Map"
        resultType="com.jiuyescm.bms.biz.storage.entity.BizOutstockPackmaterialEntity"> 
        select a.* from biz_outstock_packmaterial a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and b.products_mark=#{productsMark} and b.bwd_mark!=#{bwdMark}
		and a.del_flag='0' and c.del_flag='0' and c.material_type_name='保温袋' and a.customer_id=#{customerId} and a.create_time>=#{startTime} and a.create_time<![CDATA[<=#{endTime}]]>
     	<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
	    </if>
	    and d.is_new_plan='0'		
     	union
     	select a.* from biz_outstock_packmaterial a 
		INNER JOIN bms_marking_products b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on a.consumer_material_code=c.material_code
		INNER JOIN biz_dispatch_bill d on a.waybill_no=d.waybill_no
		where 1=1 and b.products_mark=#{productsMark} and b.bwd_mark=#{bwdMark} and b.bwd_corrected='1'
		and a.del_flag='0' and c.del_flag='0' and c.material_type_name='保温袋' and a.customer_id=#{customerId} and a.create_time>=#{startTime} and a.create_time<![CDATA[<=#{endTime}]]>
   		<if test="(orderList!=null and orderList.size()>0)">
        	and IFNULL(d.ordertypeid,'') not in
        	<foreach collection="orderList" index="index" item="item" open="(" separator="," close=")">
        	 	#{item}
        	</foreach>
	    </if>
	    and d.is_new_plan='0'	
     </select>
   
     <!-- <select id="getMaterialMap" parameterType="java.util.Map" resultType="String">
		select CONCAT(b.consumer_material_code,'%',a.bwd_mark) from bms_marking_products a 
		INNER JOIN biz_outstock_packmaterial b on a.waybill_no=b.waybill_no
		INNER JOIN pub_material_info c on b.consumer_material_code=c.material_code
		where a.products_mark=#{productsMark} 	
		and a.bwd_mark in 
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
    		#{item}
    	</foreach>
		and c.material_type_name='保温袋' and b.del_flag='0' and c.del_flag='0'
	</select>
	 -->
	 
	<select id="getMaterialMap" parameterType="java.util.Map" resultType="String">
		select CONCAT(consumer_material_code,'%',material_mark) from bms_material_mark_origin 
		where material_mark in 
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
    		#{item}
    	</foreach>
    	GROUP BY material_mark
	</select>
	
	<select id="queryByMark" parameterType="java.util.Map" resultType="com.jiuyescm.bms.correct.BmsMaterialMarkOriginEntity">
		select * from bms_material_mark_origin where material_mark=#{materialMark} GROUP BY consumer_material_code
	</select>
	
	<update id="updatePmxzxMark" parameterType="java.util.Map">
		update bms_marking_products set pmxzx_corrected='1'
		where waybill_no in 
    	<foreach collection="waybillnos" index="index" item="item" open="(" separator="," close=")">
				#{item}
		</foreach>
	</update>
	
	<update id="updatePmxMark" parameterType="java.util.Map">
		update bms_marking_products set pmx_corrected='1'
		where waybill_no in 
    	<foreach collection="waybillnos" index="index" item="item" open="(" separator="," close=")">
				#{item}
		</foreach>
	</update>
	
	<update id="updateZxMark" parameterType="java.util.Map">
		update bms_marking_products set zx_corrected='1'
		where waybill_no in 
    	<foreach collection="waybillnos" index="index" item="item" open="(" separator="," close=")">
				#{item}
		</foreach>
	</update>
	
	<update id="updateBwdMark" parameterType="java.util.Map">
		update bms_marking_products set bwd_corrected='1'
		where waybill_no in 
    	<foreach collection="waybillnos" index="index" item="item" open="(" separator="," close=")">
				#{item}
		</foreach>
	</update>
</mapper> 