<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">       
    
    <!-- 配置activeMQ连接  tcp://192.168.0.66:61616 -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="useAsyncSend" value="${activemq.connnect.useAsyncSend}"></property>
        <property name="brokerURL" value="${rocketmq.namesrv.addr}" />
        <property name="sendTimeout" value="${activemq.sendTimeout}" />  
    </bean>  
    
    <!-- 通过往PooledConnectionFactory注入一个ActiveMQConnectionFactory可以用来将Connection，Session和MessageProducer池化   
        这样可以大大减少我们的资源消耗， -->  
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  
        <property name="connectionFactory" ref="targetConnectionFactory" />  
        <property name="maxConnections" value="${activemq.maxConnections}" />  
    </bean>  
    
    <!-- 连接池配置 -->
    <bean id="queueMessageExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
	    <property name="corePoolSize" value="15" />  
	    <property name="maxPoolSize" value="50" />  
	    <property name="daemon" value="true" />  
	    <property name="keepAliveSeconds" value="120" />  
	</bean>
	
	<bean id="queueMessageExecutorTimer" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
	    <property name="corePoolSize" value="15" />  
	    <property name="maxPoolSize" value="50" />  
	    <property name="daemon" value="true" />  
	    <property name="keepAliveSeconds" value="120" />  
	</bean>
    
    <!-- 定义JmsTemplate的Queue类型 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg ref="pooledConnectionFactory" />
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <!-- <property name="pubSubDomain" value="false" /> -->
        <!-- 不开启事物 -->  
        <property name="sessionTransacted" value="false"></property>  
        <!-- 应答模式是 INDIVIDUAL_ACKNOWLEDGE -->  
        <property name="sessionAcknowledgeMode" value="4"></property>  
    </bean>
    
    <!-- AUTO_ACKNOWLEDGE = 1 ：自动确认
	CLIENT_ACKNOWLEDGE = 2：客户端手动确认 
	DUPS_OK_ACKNOWLEDGE = 3： 自动批量确认
	SESSION_TRANSACTED = 0：事务提交并确认
	但是在activemq补充了一个自定义的ACK模式:
	INDIVIDUAL_ACKNOWLEDGE = 4：单条消息确认 -->
    
     <jms:listener-container task-executor="queueMessageExecutor" destination-type="queue" container-type="default" prefetch="1" connection-factory="pooledConnectionFactory" acknowledge="auto" concurrency="5-5">
     
    	<jms:listener destination="BMS.QUEUE.CALCU.INSTOCK.INSTOCKWORK" ref="whInstockWorkCalcuListener"/>
    	<jms:listener destination="BMS.QUEUE.CALCU.INSTOCK.B2CHANDWORK" ref="whInstockB2BCalcuListener"/>
    	
	    <jms:listener destination="BMS.QUEUE.CALCU.OUTSTOCK.B2BHANDWORK" ref="outstockB2BHandWorkCalcuListener"/>
	    <jms:listener destination="BMS.QUEUE.CALCU.OUTSTOCK.B2BWORK" ref="outstockB2BWorkCalcuListener"/>
	    <jms:listener destination="BMS.QUEUE.CALCU.OUTSTOCK.B2CWORK" ref="outstockB2CWorkCalcuListener"/>
	    
	    <jms:listener destination="BMS.QUEUE.CALCU.WAYBILL.DISPATCH" ref="dispatchCalcuListener"/>
	    
	    <jms:listener destination="BMS.QUEUE.CALCU.PALLET.PRODUCTSTORAGE" ref="palletProductCalcuListener"/>
	    <jms:listener destination="BMS.QUEUE.CALCU.PALLET.MATERIALSTORAGE" ref="palletMaterialCalcuListener"/>
	    <jms:listener destination="BMS.QUEUE.CALCU.PALLET.DISPOSAL" ref="palletDisposalCalcuListener"/>
	    
	    <jms:listener destination="BMS.QUEUE.CALCU.PRODUCT.PRODUCTSTORAGE" ref="productItemCalcuListener"/>
	    
		<jms:listener destination="BMS.QUEUE.CALCU.MATERIAL.MATERIALUSE" ref="materialUseCalcuListener"/>
		
		<jms:listener destination="BMS.QUEUE.CALCU.VALUE.VALUEADD" ref="addUseCalcuListener"/>    
	
		<jms:listener destination="BMS.QUEUE.CALCU.MATERIAL.DISPATCHPACKAGE" ref="dispatchPackageCalcuListener"/>    
    </jms:listener-container>
</beans>
 